{"version":3,"sources":["webpack:///node_modules/@ionic/core/dist/esm/keyboard-5742b5da.js"],"names":["KEYBOARD_DID_OPEN","KEYBOARD_DID_CLOSE","KEYBOARD_THRESHOLD","previousVisualViewport","currentVisualViewport","keyboardOpen","resetKeyboardAssist","startKeyboardAssist","win","startNativeListeners","visualViewport","copyVisualViewport","onresize","trackViewportChanges","keyboardDidOpen","keyboardDidResize","setKeyboardOpen","keyboardDidClose","setKeyboardClose","addEventListener","ev","fireKeyboardOpenEvent","fireKeyboardCloseEvent","scaledHeightDifference","height","scale","width","innerHeight","nativeEv","keyboardHeight","CustomEvent","detail","dispatchEvent","Object","assign","Math","round","offsetTop","offsetLeft","pageTop","pageLeft"],"mappings":"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","file":"node_modules_ionic_core_dist_esm_keyboard-5742b5da_js-es5.js","sourcesContent":["const KEYBOARD_DID_OPEN = 'ionKeyboardDidShow';\nconst KEYBOARD_DID_CLOSE = 'ionKeyboardDidHide';\nconst KEYBOARD_THRESHOLD = 150;\nlet previousVisualViewport = {};\nlet currentVisualViewport = {};\nlet keyboardOpen = false;\n/**\n * This is only used for tests\n */\nconst resetKeyboardAssist = () => {\n  previousVisualViewport = {};\n  currentVisualViewport = {};\n  keyboardOpen = false;\n};\nconst startKeyboardAssist = (win) => {\n  startNativeListeners(win);\n  if (!win.visualViewport) {\n    return;\n  }\n  currentVisualViewport = copyVisualViewport(win.visualViewport);\n  win.visualViewport.onresize = () => {\n    trackViewportChanges(win);\n    if (keyboardDidOpen() || keyboardDidResize(win)) {\n      setKeyboardOpen(win);\n    }\n    else if (keyboardDidClose(win)) {\n      setKeyboardClose(win);\n    }\n  };\n};\n/**\n * Listen for events fired by native keyboard plugin\n * in Capacitor/Cordova so devs only need to listen\n * in one place.\n */\nconst startNativeListeners = (win) => {\n  win.addEventListener('keyboardDidShow', ev => setKeyboardOpen(win, ev));\n  win.addEventListener('keyboardDidHide', () => setKeyboardClose(win));\n};\nconst setKeyboardOpen = (win, ev) => {\n  fireKeyboardOpenEvent(win, ev);\n  keyboardOpen = true;\n};\nconst setKeyboardClose = (win) => {\n  fireKeyboardCloseEvent(win);\n  keyboardOpen = false;\n};\n/**\n * Returns `true` if the `keyboardOpen` flag is not\n * set, the previous visual viewport width equal the current\n * visual viewport width, and if the scaled difference\n * of the previous visual viewport height minus the current\n * visual viewport height is greater than KEYBOARD_THRESHOLD\n *\n * We need to be able to accommodate users who have zooming\n * enabled in their browser (or have zoomed in manually) which\n * is why we take into account the current visual viewport's\n * scale value.\n */\nconst keyboardDidOpen = () => {\n  const scaledHeightDifference = (previousVisualViewport.height - currentVisualViewport.height) * currentVisualViewport.scale;\n  return (!keyboardOpen &&\n    previousVisualViewport.width === currentVisualViewport.width &&\n    scaledHeightDifference > KEYBOARD_THRESHOLD);\n};\n/**\n * Returns `true` if the keyboard is open,\n * but the keyboard did not close\n */\nconst keyboardDidResize = (win) => {\n  return keyboardOpen && !keyboardDidClose(win);\n};\n/**\n * Determine if the keyboard was closed\n * Returns `true` if the `keyboardOpen` flag is set and\n * the current visual viewport height equals the\n * layout viewport height.\n */\nconst keyboardDidClose = (win) => {\n  return keyboardOpen && currentVisualViewport.height === win.innerHeight;\n};\n/**\n * Dispatch a keyboard open event\n */\nconst fireKeyboardOpenEvent = (win, nativeEv) => {\n  const keyboardHeight = nativeEv ? nativeEv.keyboardHeight : win.innerHeight - currentVisualViewport.height;\n  const ev = new CustomEvent(KEYBOARD_DID_OPEN, {\n    detail: { keyboardHeight }\n  });\n  win.dispatchEvent(ev);\n};\n/**\n * Dispatch a keyboard close event\n */\nconst fireKeyboardCloseEvent = (win) => {\n  const ev = new CustomEvent(KEYBOARD_DID_CLOSE);\n  win.dispatchEvent(ev);\n};\n/**\n * Given a window object, create a copy of\n * the current visual and layout viewport states\n * while also preserving the previous visual and\n * layout viewport states\n */\nconst trackViewportChanges = (win) => {\n  previousVisualViewport = Object.assign({}, currentVisualViewport);\n  currentVisualViewport = copyVisualViewport(win.visualViewport);\n};\n/**\n * Creates a deep copy of the visual viewport\n * at a given state\n */\nconst copyVisualViewport = (visualViewport) => {\n  return {\n    width: Math.round(visualViewport.width),\n    height: Math.round(visualViewport.height),\n    offsetTop: visualViewport.offsetTop,\n    offsetLeft: visualViewport.offsetLeft,\n    pageTop: visualViewport.pageTop,\n    pageLeft: visualViewport.pageLeft,\n    scale: visualViewport.scale\n  };\n};\n\nexport { KEYBOARD_DID_CLOSE, KEYBOARD_DID_OPEN, copyVisualViewport, keyboardDidClose, keyboardDidOpen, keyboardDidResize, resetKeyboardAssist, setKeyboardClose, setKeyboardOpen, startKeyboardAssist, trackViewportChanges };\n"]}