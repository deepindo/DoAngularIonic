(function () {
  (self["webpackChunkDoIonicAngular"] = self["webpackChunkDoIonicAngular"] || []).push([["node_modules_ionic_core_dist_esm_keyboard-5742b5da_js"], {
    /***/
    81296: function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "KEYBOARD_DID_CLOSE": function KEYBOARD_DID_CLOSE() {
          return (
            /* binding */
            _KEYBOARD_DID_CLOSE
          );
        },

        /* harmony export */
        "KEYBOARD_DID_OPEN": function KEYBOARD_DID_OPEN() {
          return (
            /* binding */
            _KEYBOARD_DID_OPEN
          );
        },

        /* harmony export */
        "copyVisualViewport": function copyVisualViewport() {
          return (
            /* binding */
            _copyVisualViewport
          );
        },

        /* harmony export */
        "keyboardDidClose": function keyboardDidClose() {
          return (
            /* binding */
            _keyboardDidClose
          );
        },

        /* harmony export */
        "keyboardDidOpen": function keyboardDidOpen() {
          return (
            /* binding */
            _keyboardDidOpen
          );
        },

        /* harmony export */
        "keyboardDidResize": function keyboardDidResize() {
          return (
            /* binding */
            _keyboardDidResize
          );
        },

        /* harmony export */
        "resetKeyboardAssist": function resetKeyboardAssist() {
          return (
            /* binding */
            _resetKeyboardAssist
          );
        },

        /* harmony export */
        "setKeyboardClose": function setKeyboardClose() {
          return (
            /* binding */
            _setKeyboardClose
          );
        },

        /* harmony export */
        "setKeyboardOpen": function setKeyboardOpen() {
          return (
            /* binding */
            _setKeyboardOpen
          );
        },

        /* harmony export */
        "startKeyboardAssist": function startKeyboardAssist() {
          return (
            /* binding */
            _startKeyboardAssist
          );
        },

        /* harmony export */
        "trackViewportChanges": function trackViewportChanges() {
          return (
            /* binding */
            _trackViewportChanges
          );
        }
        /* harmony export */

      });

      var _KEYBOARD_DID_OPEN = 'ionKeyboardDidShow';
      var _KEYBOARD_DID_CLOSE = 'ionKeyboardDidHide';
      var KEYBOARD_THRESHOLD = 150;
      var previousVisualViewport = {};
      var currentVisualViewport = {};
      var keyboardOpen = false;
      /**
       * This is only used for tests
       */

      var _resetKeyboardAssist = function _resetKeyboardAssist() {
        previousVisualViewport = {};
        currentVisualViewport = {};
        keyboardOpen = false;
      };

      var _startKeyboardAssist = function _startKeyboardAssist(win) {
        startNativeListeners(win);

        if (!win.visualViewport) {
          return;
        }

        currentVisualViewport = _copyVisualViewport(win.visualViewport);

        win.visualViewport.onresize = function () {
          _trackViewportChanges(win);

          if (_keyboardDidOpen() || _keyboardDidResize(win)) {
            _setKeyboardOpen(win);
          } else if (_keyboardDidClose(win)) {
            _setKeyboardClose(win);
          }
        };
      };
      /**
       * Listen for events fired by native keyboard plugin
       * in Capacitor/Cordova so devs only need to listen
       * in one place.
       */


      var startNativeListeners = function startNativeListeners(win) {
        win.addEventListener('keyboardDidShow', function (ev) {
          return _setKeyboardOpen(win, ev);
        });
        win.addEventListener('keyboardDidHide', function () {
          return _setKeyboardClose(win);
        });
      };

      var _setKeyboardOpen = function _setKeyboardOpen(win, ev) {
        fireKeyboardOpenEvent(win, ev);
        keyboardOpen = true;
      };

      var _setKeyboardClose = function _setKeyboardClose(win) {
        fireKeyboardCloseEvent(win);
        keyboardOpen = false;
      };
      /**
       * Returns `true` if the `keyboardOpen` flag is not
       * set, the previous visual viewport width equal the current
       * visual viewport width, and if the scaled difference
       * of the previous visual viewport height minus the current
       * visual viewport height is greater than KEYBOARD_THRESHOLD
       *
       * We need to be able to accommodate users who have zooming
       * enabled in their browser (or have zoomed in manually) which
       * is why we take into account the current visual viewport's
       * scale value.
       */


      var _keyboardDidOpen = function _keyboardDidOpen() {
        var scaledHeightDifference = (previousVisualViewport.height - currentVisualViewport.height) * currentVisualViewport.scale;
        return !keyboardOpen && previousVisualViewport.width === currentVisualViewport.width && scaledHeightDifference > KEYBOARD_THRESHOLD;
      };
      /**
       * Returns `true` if the keyboard is open,
       * but the keyboard did not close
       */


      var _keyboardDidResize = function _keyboardDidResize(win) {
        return keyboardOpen && !_keyboardDidClose(win);
      };
      /**
       * Determine if the keyboard was closed
       * Returns `true` if the `keyboardOpen` flag is set and
       * the current visual viewport height equals the
       * layout viewport height.
       */


      var _keyboardDidClose = function _keyboardDidClose(win) {
        return keyboardOpen && currentVisualViewport.height === win.innerHeight;
      };
      /**
       * Dispatch a keyboard open event
       */


      var fireKeyboardOpenEvent = function fireKeyboardOpenEvent(win, nativeEv) {
        var keyboardHeight = nativeEv ? nativeEv.keyboardHeight : win.innerHeight - currentVisualViewport.height;
        var ev = new CustomEvent(_KEYBOARD_DID_OPEN, {
          detail: {
            keyboardHeight: keyboardHeight
          }
        });
        win.dispatchEvent(ev);
      };
      /**
       * Dispatch a keyboard close event
       */


      var fireKeyboardCloseEvent = function fireKeyboardCloseEvent(win) {
        var ev = new CustomEvent(_KEYBOARD_DID_CLOSE);
        win.dispatchEvent(ev);
      };
      /**
       * Given a window object, create a copy of
       * the current visual and layout viewport states
       * while also preserving the previous visual and
       * layout viewport states
       */


      var _trackViewportChanges = function _trackViewportChanges(win) {
        previousVisualViewport = Object.assign({}, currentVisualViewport);
        currentVisualViewport = _copyVisualViewport(win.visualViewport);
      };
      /**
       * Creates a deep copy of the visual viewport
       * at a given state
       */


      var _copyVisualViewport = function _copyVisualViewport(visualViewport) {
        return {
          width: Math.round(visualViewport.width),
          height: Math.round(visualViewport.height),
          offsetTop: visualViewport.offsetTop,
          offsetLeft: visualViewport.offsetLeft,
          pageTop: visualViewport.pageTop,
          pageLeft: visualViewport.pageLeft,
          scale: visualViewport.scale
        };
      };
      /***/

    }
  }]);
})();
//# sourceMappingURL=node_modules_ionic_core_dist_esm_keyboard-5742b5da_js-es5.js.map